# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: 12.3.0 # Specify the Xcode version to use

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
              sed -i -e 's/git@github.com:/git:\/\/github.com\//' .gitmodules
              git submodule update --init --recursive
      - run:
          name: "Pre-build scripts"
          command: |
              touch iBurn/GoogleService-Info.plist
              echo -e "<?xml version='1.0' encoding='UTF-8'?><!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'><plist version='1.0'><dict><key>AD_UNIT_ID_FOR_BANNER_TEST</key><string>ca-app-pub-3940256099942544/2934735716</string><key>AD_UNIT_ID_FOR_INTERSTITIAL_TEST</key><string>ca-app-pub-3940256099942544/4411468910</string><key>CLIENT_ID</key><string>test-do-not-use.apps.googleusercontent.com</string><key>REVERSED_CLIENT_ID</key><string>com.googleusercontent.apps.test-do-not-use</string><key>API_KEY</key><string>000000000000000000000000000000000000000</string><key>GCM_SENDER_ID</key><string>999999999999</string><key>PLIST_VERSION</key><string>1</string><key>BUNDLE_ID</key><string>com.google.example.BannerExample</string><key>IS_ADS_ENABLED</key><true/><key>IS_ANALYTICS_ENABLED</key><false/><key>IS_APPINVITE_ENABLED</key><false/><key>IS_GCM_ENABLED</key><true/><key>IS_SIGNIN_ENABLED</key><true/><key>GOOGLE_APP_ID</key><string>1:999999999999:ios:0000000000000000</string><key>DATABASE_URL</key><string>https://test-do-not-use.firebaseio.com</string></dict></plist>" > iBurn/GoogleService-Info.plist
              echo -e "#define MAPBOX_ACCESS_TOKEN test\n#define CRASHLYTICS_API_TOKEN test\n" > ./iBurn/InfoPlistSecrets.h
              echo -e "NSString * const kBRCHockeyBetaIdentifier = @\"\";\nNSString * const kBRCHockeyLiveIdentifier = @\"\";\nNSString * const kBRCEmbargoPasscodeSHA256Hash = @\"\";\nNSString * const kBRCUpdatesURLString = @\"\";\nNSString * const kBRCMapBoxStyleURL = @\"https://example.com\";\nNSString * const kBRCMapBoxAccessToken = @\"\";\n" > ./iBurn/BRCSecrets.m
              bundle install
              bundle exec pod repo update --silent
              bundle exec pod install
      - run: 
          name: "Build"
          command: |
            set -o pipefail
            xcodebuild -workspace iBurn.xcworkspace -scheme iBurn -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 8,OS=12.4" build | xcpretty -c

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
